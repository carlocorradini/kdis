name: check

on:
    push:
        branches:
            - master
        tags:
            - v*
    pull_request:
        branches:
            - master

concurrency:
    group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
    cancel-in-progress: true

jobs:
    version:
        name: Version
        if: startsWith(github.ref_name, 'v')
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Check Git tag format
              run: |
                  _tag="${{ github.ref_name }}"
                  if ! printf "%s\n" "$_tag" | grep -q -P '^v(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-(alpha|beta|rc)\.(0|[1-9][0-9]*))?$'; then
                    printf '[ERROR]: Git tag (%s) wrong format\n' "$_tag"
                    exit 1
                  fi

    code:
        name: Code
        needs: version
        if: always() && (needs.version.result == 'success' || needs.version.result == 'skipped')
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup Python
              uses: actions/setup-python@v4

            - name: Install cmakelang
              run: pip install cmakelang[YAML]

            - name: Clang Format
              run: |
                  find . \
                      -not -path './build/*' \
                      -type f \( \
                      -name '*.hpp' \
                      -o -name '*.hpp.in' \
                      -o -name '*.cpp' \
                      \) \
                      -print0 |
                      xargs -0 -n1 \
                          clang-format \
                          -Werror \
                          --dry-run \
                          --style=file

            # TODO(carlocorradini) Clang Tidy

            - name: CMake Format
              run: |
                  find . \
                      -not -path './build/*' \
                      -not -path './cmake/CPM.cmake' \
                      -type f \( \
                      -name 'CMakeLists.txt' \
                      -o -name '*.cmake' \
                      \) \
                      -print0 |
                      xargs -0 -n1 \
                          cmake-format --check

            - name: CMake Lint
              run: |
                  find . \
                      -not -path './build/*' \
                      -not -path './cmake/CPM.cmake' \
                      -type f \( \
                      -name 'CMakeLists.txt' \
                      -o -name '*.cmake' \
                      \) \
                      -print0 |
                      xargs -0 -n1 \
                          cmake-lint

            # TODO(carlocorradini) Cppcheck

            # TODO(carlocorradini) Cpplint

    build:
        name: Build
        needs: code
        strategy:
            fail-fast: true
            matrix:
                # TODO(carlocorradini) Add macos-latest
                os: [ubuntu-latest, windows-latest]
                build: [Debug, Release]
                dis: [5, 6, 7]
        runs-on: ${{ matrix.os }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Install Doxygen
              uses: ssciwr/doxygen-install@v1

            - name: Configure CMake
              run: cmake -S . -B ./build -DCMAKE_BUILD_TYPE=${{ matrix.build }} -DDIS_VERSION=${{ matrix.dis }} -DBUILD_SHARED_LIBS=OFF -DBUILD_DOCS=ON -DBUILD_EXAMPLES=ON -DBUILD_TESTS=ON

            - name: Build
              run: cmake --build ./build --config ${{ matrix.build }}

            - name: Test
              run: ctest --verbose --test-dir ./build/tests --build-config ${{ matrix.build }}

            # TODO(carlocorradini) Code coverage
